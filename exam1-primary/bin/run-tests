#!/bin/bash
# runs chosen tokeniser over test files or regenerates them
# it assumes this directory is SOMEWHERE/bin
# it assumes tests directory is SOMEWHERE/tests, ie ../tests
# it assumes that the executable is in the parent directory SOMEWHERE/

# tests / tokeniser to run
case $1 in
startup)
	tokeniser="../tokeniser"
	tokeniser_path="tokeniser"
	tokeniser_message="student tokeniser"
	regenerate="ALL"
	;;
*)
	tokeniser="../tokeniser"
	tokeniser_path="tokeniser"
	tokeniser_message="student tokeniser"
	regenerate="NO"
	;;
esac
loud=loud

# work out relative path to tests directory
THISPWD=`pwd`

# cd to the bin directory - where this script is
BINDIR=`dirname $0`
cd "$BINDIR"
BINPWD=`pwd`

# find the parent directory name
PARENTDIR=`dirname "${BINPWD}"`

# check we have a tests dir
if [ ! -d "../tests" ] ; then
	echo "Cannot find the tests directory"
	exit -1
fi

# cd to the tests dir
cd "../tests"
TESTPWD=`pwd`

# fix up pathnames to be displayed to the user
if [ "$THISPWD" == "$TESTPWD" ] ; then
	TESTDIR=""
	PARENTDIR="../"
elif [ "$THISPWD" == "$BINPWD" ] ; then
	TESTDIR="../tests/"
	PARENTDIR="../"
elif [ "$THISPWD" == "$PARENTDIR" ] ; then
	TESTDIR="tests/"
	PARENTDIR="./"
else
	echo "Execute the following command first if you want to cut-paste the test commands:"
	echo "cd ${PARENTDIR}"
	echo
	TESTDIR="tests/"
	PARENTDIR="./"
fi

# we are in tests, make sure everything is executable that should be
chmod 770 ../tokeniser ../bin/* ../lib/*/bin/*

# check we have a tokeniser first
if [ ! -x "${tokeniser}" ] ; then
	echo Cannot find executable ${PARENTDIR}${tokeniser_path}
	exit -1
fi

### PRETTY STUFF ###

# construct the diff command to display
if [ -x ../bin/diffc ] ; then
    diffcmd=${PARENTDIR}bin/diffc
else
    # if no diffc command, just use tell students to use diff
    diffcmd=diff
fi


# if using an xterm - use headings and colour coded test results
if [ "${TERM:0:5}" == "xterm" -o "${TERM:0:2}" == "vt" ] ; then
	colorboldblack="\x1b[1;7;30m"
	colorboldgreen="\x1b[1;7;32m"
	colorboldred="\x1b[1;7;31m"
	undocolor="\x1b[0m"
else
	colorboldblack=
	colorboldgreen=
	colorboldred=
	undocolor=
fi

# make a string of whitespace matching the longest string parameter
padding=
setpadding()
{
	padding=
	while [ "${#@}" -gt 0 ] ; do
		while [ "${#padding}" -lt "${#1}" ] ; do
			padding="${padding} "
		done
		shift 1
	done
}

# column1 - blank
setpadding "Checking"
col1="${padding}"

# column2 - test input file
setpadding "cat ${TESTDIR}01234567890123456789"
input_padding="${padding}"

col2="          Test Input"
col2="${col2}${input_padding:${#col2}}"

# column3 - the tokeniser being run
setpadding "${PARENTDIR}${tokeniser_path}"
command_padding1="${padding}"

col3="  Tokeniser"
col3="${col3}${command_padding1:${#col3}}"

# column 4 - test expected output file
setpadding "${diffcmd} - ${TESTDIR}01234567890123456789.tokens"
output_padding="${padding}"

col4="             Expected Test Output"
col4="${col4}${output_padding:${#col4}}"

# column 5 - test result
setpadding " test passed " " test failed "
result_padding="${padding}"
col5=" Test Result"
col5="${col5}${result_padding:${#col5}}"

# nullglob is set so nothing runs if there are no test files
shopt -s nullglob

banner="NO"
header=
columns=
display_banner()
{
	if [ "${banner}" == "YES" ] ; then return ; fi

	banner="YES"
	if [ ${#header} -gt 0 ] ; then echo "${header}" ; fi
	if [ ${#columns} -gt 0 ] ; then echo -e "${columns}" ; fi
}

if [ "${regenerate}" == "ALL" ] ; then
	echo "Regenerating all .tokens files"

    echo -n > empty
    echo -n > empty.tokens

else
	# test tokeniser with all test files that have a matching .tokens file
	header="Testing ${tokeniser_message} against .tokens files"
	columns="${colorboldblack}${col1}| ${col2} | ${col3} | ${col4}  | ${col5}${undocolor}"
	for i in *.tokens ; do
		input="${i%%.tokens}"
		if [ -f "${input}" ] ; then
			display_input="cat ${TESTDIR}${input}"
			display_input="${display_input}${input_padding:${#display_input}}"

			display_output="${diffcmd} - ${TESTDIR}${i}"
			display_output="${display_output}${output_padding:${#display_output}}"

			testmessage="Checking \"${display_input} | ${PARENTDIR}${tokeniser_path} | ${display_output}\" - "
			if cat ${input} | ${tokeniser} 2> /dev/null | diff -q - ${i} > /dev/null 2> /dev/null ; then
				if [ "${loud}" != "quiet" ] ; then
					display_banner
					echo -e "${testmessage} ${colorboldgreen}test passed${undocolor}" ;
				fi
			else
				display_banner
				echo -e "${testmessage} ${colorboldred}test failed${undocolor}"
			fi
		fi
	done
fi
